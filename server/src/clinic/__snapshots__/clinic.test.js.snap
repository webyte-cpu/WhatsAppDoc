// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Queries creates a clinic 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    [ValidationError: Cannot query field "doctorUid" on type "Clinic".],
    [ValidationError: Field "address" of type "Address" must have a selection of subfields. Did you mean "address { ... }"?],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Queries deletes a clinic 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    [ValidationError: Cannot query field "doctorUid" on type "Clinic".],
    [ValidationError: Field "address" of type "Address" must have a selection of subfields. Did you mean "address { ... }"?],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Queries fetches created clinic 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    [ValidationError: Cannot query field "doctorUid" on type "Clinic".],
    [ValidationError: Field "address" of type "Address" must have a selection of subfields. Did you mean "address { ... }"?],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Queries fetches existing clinic 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    [ValidationError: Cannot query field "doctorUid" on type "Clinic".],
    [ValidationError: Field "address" of type "Address" must have a selection of subfields. Did you mean "address { ... }"?],
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Queries updates a clinic 1`] = `
Object {
  "data": Object {
    "updateClinic": Object {
      "name": "Clinic number 5",
      "roomNumber": "9",
      "uid": "027ae0ac-05d6-43bf-818e-a76607b7f976",
    },
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;
