{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar IndexPath = function () {\n  function IndexPath(row, section) {\n    var _this = this;\n\n    _classCallCheck(this, IndexPath);\n\n    this.row = row;\n    this.section = section;\n\n    this.equals = function (other) {\n      if (!other) {\n        return false;\n      }\n\n      return _this.row === other.row && _this.section === other.section;\n    };\n  }\n\n  _createClass(IndexPath, [{\n    key: \"groupIndex\",\n    get: function get() {\n      return this.section >= 0 && new IndexPath(this.row);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.section >= 0) {\n        return this.section + 1 + \".\" + (this.row + 1);\n      }\n\n      return (this.row + 1).toString();\n    }\n  }]);\n\n  return IndexPath;\n}();\n\nexports.IndexPath = IndexPath;","map":{"version":3,"sources":["../../../../src/components/devsupport/typings.ts"],"names":[],"mappings":";;;;;;;;;;IASa,S;AAEX,qBAAqB,GAArB,EAA2C,OAA3C,EAA2D;AAAA;;AAAA;;AAAtC,SAAA,GAAA,GAAA,GAAA;AAAsB,SAAA,OAAA,GAAA,OAAA;;AAcpC,SAAA,MAAA,GAAS,UAAC,KAAD,EAA8B;AAC5C,UAAI,CAAC,KAAL,EAAY;AACV,eAAO,KAAP;AACD;;AACD,aAAO,KAAI,CAAC,GAAL,KAAa,KAAK,CAAC,GAAnB,IAA0B,KAAI,CAAC,OAAL,KAAiB,KAAK,CAAC,OAAxD;AACD,KALM;AAbN;;;;SAED,eAAc;AACZ,aAAO,KAAK,OAAL,IAAgB,CAAhB,IAAqB,IAAI,SAAJ,CAAc,KAAK,GAAnB,CAA5B;AACD;;;WAEM,oBAAQ;AACb,UAAI,KAAK,OAAL,IAAgB,CAApB,EAAuB;AACrB,eAAU,KAAK,OAAL,GAAe,CAAzB,UAA8B,KAAK,GAAL,GAAW,CAAzC;AACD;;AACD,aAAO,CAAC,KAAK,GAAL,GAAW,CAAZ,EAAe,QAAf,EAAP;AACD;;;;;;AAdH,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass IndexPath {\r\n    constructor(row, section) {\r\n        this.row = row;\r\n        this.section = section;\r\n        this.equals = (other) => {\r\n            if (!other) {\r\n                return false;\r\n            }\r\n            return this.row === other.row && this.section === other.section;\r\n        };\r\n    }\r\n    get groupIndex() {\r\n        return this.section >= 0 && new IndexPath(this.row);\r\n    }\r\n    toString() {\r\n        if (this.section >= 0) {\r\n            return `${this.section + 1}.${this.row + 1}`;\r\n        }\r\n        return (this.row + 1).toString();\r\n    }\r\n}\r\nexports.IndexPath = IndexPath;\r\n//# sourceMappingURL=typings.js.map"]},"metadata":{},"sourceType":"script"}