{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/sean/Documents/WhatsAppDoc/maps/Clinics/Clinics.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useQuery } from '@apollo/client';\nimport { GET_CLINICS } from \"./queries\";\nimport { useEffect, useState } from 'react';\nexport default function Clinics() {\n  var _useQuery = useQuery(GET_CLINICS, {\n    pollInterval: 500\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _useState = useState([{\n    hello: \"hello\"\n  }]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clinics = _useState2[0],\n      setClinics = _useState2[1];\n\n  if (loading) return 'Loading...';\n  if (error) return \"Error! \" + error.message;\n  var dataClinics = data.getClinic;\n  console.log(dataClinics);\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Test Component\"));\n}","map":{"version":3,"sources":["/home/sean/Documents/WhatsAppDoc/maps/Clinics/Clinics.js"],"names":["StatusBar","React","useQuery","GET_CLINICS","useEffect","useState","Clinics","pollInterval","loading","error","data","hello","clinics","setClinics","message","dataClinics","getClinic","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA,eAAe,SAASC,OAAT,GAAmB;AAEhC,kBAAiCJ,QAAQ,CAACC,WAAD,EAAc;AAAEI,IAAAA,YAAY,EAAE;AAAhB,GAAd,CAAzC;AAAA,MAAQC,OAAR,aAAQA,OAAR;AAAA,MAAiBC,KAAjB,aAAiBA,KAAjB;AAAA,MAAwBC,IAAxB,aAAwBA,IAAxB;;AACA,kBAA+BL,QAAQ,CAAC,CAAC;AAACM,IAAAA,KAAK,EAAC;AAAP,GAAD,CAAD,CAAvC;AAAA;AAAA,MAAQC,OAAR;AAAA,MAAiBC,UAAjB;;AAEA,MAAIL,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,mBAAiBA,KAAK,CAACK,OAAvB;AAEX,MAAMC,WAAW,GAAGL,IAAI,CAACM,SAAzB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAIA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADJ;AAMD","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react'\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\nimport { useQuery } from '@apollo/client';\nimport { GET_CLINICS } from './queries'\nimport { useEffect, useState } from 'react';\n\n\n\nexport default function Clinics() {\n\n  const { loading, error, data } = useQuery(GET_CLINICS, { pollInterval: 500 });\n  const [ clinics, setClinics] = useState([{hello:\"hello\"}])\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  const dataClinics = data.getClinic\n  console.log(dataClinics)\n  \n\n\n  return (\n      <View>\n        <Text>Test Component</Text>\n      </View>\n\n  );\n}\n"]},"metadata":{},"sourceType":"module"}