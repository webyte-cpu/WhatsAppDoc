{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/sean/Documents/WhatsAppDoc/maps/AndroidMap.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView from 'react-native-maps';\nimport * as Location from 'expo-location';\nexport default function AndroidMap() {\n  var _useState = useState({\n    \"coords\": {\n      \"latitude\": 10.7184083,\n      \"longitude\": 122.5485867\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var fetchLocation = function fetchLocation() {\n    var _await$Location$reque, status, location;\n\n    return _regeneratorRuntime.async(function fetchLocation$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Location.requestBackgroundPermissionsAsync());\n\n          case 2:\n            _await$Location$reque = _context.sent;\n            status = _await$Location$reque.status;\n\n            if (!(status !== 'granted')) {\n              _context.next = 7;\n              break;\n            }\n\n            setErrorMsg('Permission to access location was denied');\n            return _context.abrupt(\"return\");\n\n          case 7:\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n              accuracy: 6\n            }));\n\n          case 9:\n            location = _context.sent;\n            console.log(location[\"coords\"][\"latitude\"]);\n            console.log(location[\"coords\"][\"longitude\"]);\n            setLocation(location);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchLocation();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, React.createElement(MapView, {\n    style: styles.map,\n    initialRegion: {\n      latitude: location[\"coords\"][\"latitude\"],\n      longitude: location[\"coords\"][\"longitude\"],\n      latitudeDelta: 0.03358723958820065,\n      longitudeDelta: 0.04250270688370961\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, React.createElement(MapView.Marker, {\n    draggable: true,\n    coordinate: {\n      latitude: 10.7184083,\n      longitude: 122.5485867\n    },\n    onDragEnd: function onDragEnd(e) {\n      console.log('dragEnd', e.nativeEvent.coordinate);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["/home/sean/Documents/WhatsAppDoc/maps/AndroidMap.js"],"names":["StatusBar","React","useState","useEffect","MapView","Location","AndroidMap","location","setLocation","fetchLocation","requestBackgroundPermissionsAsync","status","setErrorMsg","getCurrentPositionAsync","accuracy","console","log","styles","container","map","latitude","longitude","latitudeDelta","longitudeDelta","e","nativeEvent","coordinate","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","Dimensions","get","height"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAIA,eAAe,SAASC,UAAT,GAAsB;AAEnC,kBAAgCJ,QAAQ,CAAC;AAAE,cAAU;AAAE,kBAAY,UAAd;AAA0B,mBAAa;AAAvC;AAAZ,GAAD,CAAxC;AAAA;AAAA,MAAOK,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGJ,QAAQ,CAACK,iCAAT,EADH;;AAAA;AAAA;AACdC,YAAAA,MADc,yBACdA,MADc;;AAAA,kBAEhBA,MAAM,KAAK,SAFK;AAAA;AAAA;AAAA;;AAGlBC,YAAAA,WAAW,CAAC,0CAAD,CAAX;AAHkB;;AAAA;AAAA;AAAA,6CAQCP,QAAQ,CAACQ,uBAAT,CAAiC;AAAEC,cAAAA,QAAQ,EAAE;AAAZ,aAAjC,CARD;;AAAA;AAQhBP,YAAAA,QARgB;AASpBQ,YAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAAC,QAAD,CAAR,CAAmB,UAAnB,CAAZ;AACAQ,YAAAA,OAAO,CAACC,GAAR,CAAYT,QAAQ,CAAC,QAAD,CAAR,CAAmB,WAAnB,CAAZ;AACAC,YAAAA,WAAW,CAACD,QAAD,CAAX;;AAXoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAeAJ,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,aAAa;AAChB,GAFU,EAET,EAFS,CAAT;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEQ,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAED,MAAM,CAACE,GADhB;AAEE,IAAA,aAAa,EAAE;AACbC,MAAAA,QAAQ,EAAEb,QAAQ,CAAC,QAAD,CAAR,CAAmB,UAAnB,CADG;AAEbc,MAAAA,SAAS,EAAEd,QAAQ,CAAC,QAAD,CAAR,CAAmB,WAAnB,CAFE;AAGbe,MAAAA,aAAa,EAAE,mBAHF;AAIbC,MAAAA,cAAc,EAAE;AAJH,KAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,OAAD,CAAS,MAAT;AAAgB,IAAA,SAAS,MAAzB;AACE,IAAA,UAAU,EAAE;AACVH,MAAAA,QAAQ,EAAE,UADA;AAEVC,MAAAA,SAAS,EAAE;AAFD,KADd;AAKE,IAAA,SAAS,EAAE,mBAACG,CAAD,EAAO;AAAET,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,CAAC,CAACC,WAAF,CAAcC,UAArC;AAAkD,KALxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAHF,CADF;AAwBD;AAED,IAAMT,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC/BV,EAAAA,SAAS,EAAE;AACTW,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP,GADoB;AAO/Bb,EAAAA,GAAG,EAAE;AACHc,IAAAA,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KAD7B;AAEHG,IAAAA,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC;AAF9B;AAP0B,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { StyleSheet, View, Dimensions } from 'react-native';\nimport MapView from 'react-native-maps';\nimport * as Location from 'expo-location';\n\n\n\nexport default function AndroidMap() {\n\n  const [location, setLocation] = useState({ \"coords\": { \"latitude\": 10.7184083, \"longitude\": 122.5485867 } });\n\n  const fetchLocation = async () => {\n    let { status } = await Location.requestBackgroundPermissionsAsync();\n    if (status !== 'granted') {\n      setErrorMsg('Permission to access location was denied');\n      return;\n    }\n\n\n    let location = await Location.getCurrentPositionAsync({ accuracy: 6 });\n    console.log(location[\"coords\"][\"latitude\"])\n    console.log(location[\"coords\"][\"longitude\"])\n    setLocation(location);\n  }\n\n\n  useEffect(() => { \n    fetchLocation();\n},[]);\n\n  return (\n    <View style={styles.container}>\n\n\n      <MapView\n        style={styles.map}\n        initialRegion={{\n          latitude: location[\"coords\"][\"latitude\"],\n          longitude: location[\"coords\"][\"longitude\"],\n          latitudeDelta: 0.03358723958820065,\n          longitudeDelta: 0.04250270688370961,\n        }}>\n        <MapView.Marker draggable\n          coordinate={{\n            latitude: 10.7184083,\n            longitude: 122.5485867 ,\n          }}\n          onDragEnd={(e) => { console.log('dragEnd', e.nativeEvent.coordinate) }}\n        />\n      </MapView>\n\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}