{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ACTIONS from \"./actions\";\nimport Users from \"./dummyDataUsers\";\nimport { removeData, storeData } from \"./handleData\";\n\nvar getUser = function getUser(users, email, password) {\n  return users.find(function (user) {\n    return email === user.email && password === user.password;\n  });\n};\n\nvar loginUser = function loginUser(dispatch, email, password, errCallback) {\n  var token;\n  return _regeneratorRuntime.async(function loginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          token = getUser(Users, email, password);\n\n          if (!(token == null)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", errCallback('Email or password is incorrect.'));\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(storeData('token', token));\n\n        case 7:\n          dispatch({\n            type: ACTIONS.LOGIN,\n            payload: {\n              token: token\n            }\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar logoutUser = function logoutUser(dispatch) {\n  return _regeneratorRuntime.async(function logoutUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(removeData('token'));\n\n        case 2:\n          dispatch({\n            type: ACTIONS.LOGOUT\n          });\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar signupUser = function signupUser(dispatch, userData) {\n  var email, password;\n  return _regeneratorRuntime.async(function signupUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Users.push(userData);\n          email = userData.email, password = userData.password;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(loginUser(dispatch, email, password));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport { loginUser, logoutUser, signupUser };","map":{"version":3,"sources":["C:/VSCode/React-Native/WhatsAppDoc(Authentication_branch)/WhatsAppDoc/src/screens/auth/utils/authMethods.js"],"names":["ACTIONS","Users","removeData","storeData","getUser","users","email","password","find","user","loginUser","dispatch","errCallback","token","type","LOGIN","payload","logoutUser","LOGOUT","signupUser","userData","push"],"mappings":";AAAA,OAAOA,OAAP;AACA,OAAOC,KAAP;AACA,SAASC,UAAT,EAAqBC,SAArB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,KAAR,EAAeC,QAAf;AAAA,SACdF,KAAK,CAACG,IAAN,CAAW,UAACC,IAAD;AAAA,WAAUH,KAAK,KAAKG,IAAI,CAACH,KAAf,IAAwBC,QAAQ,KAAKE,IAAI,CAACF,QAApD;AAAA,GAAX,CADc;AAAA,CAAhB;;AAGA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAOC,QAAP,EAAiBL,KAAjB,EAAwBC,QAAxB,EAAkCK,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEVC,UAAAA,KAFU,GAEFT,OAAO,CAACH,KAAD,EAAQK,KAAR,EAAeC,QAAf,CAFL;;AAAA,gBAGZM,KAAK,IAAI,IAHG;AAAA;AAAA;AAAA;;AAAA,2CAIPD,WAAW,CAAC,iCAAD,CAJJ;;AAAA;AAAA;AAAA,2CAMRT,SAAS,CAAC,OAAD,EAAUU,KAAV,CAND;;AAAA;AAOdF,UAAAA,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAEd,OAAO,CAACe,KAAhB;AAAuBC,YAAAA,OAAO,EAAE;AAAEH,cAAAA,KAAK,EAALA;AAAF;AAAhC,WAAD,CAAR;;AAPc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAWA,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACXT,UAAU,CAAC,OAAD,CADC;;AAAA;AAEjBS,UAAAA,QAAQ,CAAC;AAAEG,YAAAA,IAAI,EAAEd,OAAO,CAACkB;AAAhB,WAAD,CAAR;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOR,QAAP,EAAiBS,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBnB,UAAAA,KAAK,CAACoB,IAAN,CAAWD,QAAX;AAEQd,UAAAA,KAJS,GAIWc,QAJX,CAITd,KAJS,EAIFC,QAJE,GAIWa,QAJX,CAIFb,QAJE;AAAA;AAAA,2CAMXG,SAAS,CAACC,QAAD,EAAWL,KAAX,EAAkBC,QAAlB,CANE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AASA,SAASG,SAAT,EAAoBO,UAApB,EAAgCE,UAAhC","sourcesContent":["import ACTIONS from './actions';\r\nimport Users from './dummyDataUsers';\r\nimport { removeData, storeData } from './handleData';\r\n\r\nconst getUser = (users, email, password) =>\r\n  users.find((user) => email === user.email && password === user.password);\r\n\r\nconst loginUser = async (dispatch, email, password, errCallback) => {\r\n  // AWAIT verify userData: send to server => hash password => find match in db => generate token (remove password) => return token\r\n  const token = getUser(Users, email, password); // JWT token\r\n  if (token == null) {\r\n    return errCallback('Email or password is incorrect.');\r\n  } else {\r\n    await storeData('token', token);\r\n    dispatch({ type: ACTIONS.LOGIN, payload: { token } });\r\n  }\r\n};\r\n\r\nconst logoutUser = async (dispatch) => {\r\n  await removeData('token');\r\n  dispatch({ type: ACTIONS.LOGOUT });\r\n};\r\n\r\nconst signupUser = async (dispatch, userData) => {\r\n  // AWAIT add user to db => login user\r\n  Users.push(userData);\r\n  // console.log(Users);\r\n  const { email, password } = userData;\r\n  // const token = await response.json()\r\n  await loginUser(dispatch, email, password);\r\n};\r\n\r\nexport { loginUser, logoutUser, signupUser };\r\n"]},"metadata":{},"sourceType":"module"}