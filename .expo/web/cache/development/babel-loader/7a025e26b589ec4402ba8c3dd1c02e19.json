{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nexport var storeData = function storeData(key, value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function storeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          jsonValue = JSON.stringify(value);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(key, jsonValue));\n\n        case 4:\n          _context.next = 9;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          throw new Error(_context.t0);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nexport var getData = function getData(key) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function getData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n        case 3:\n          jsonValue = _context2.sent;\n          return _context2.abrupt(\"return\", jsonValue != null ? JSON.parse(jsonValue) : null);\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          throw new Error(_context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n};\nexport var removeData = function removeData(key) {\n  return _regeneratorRuntime.async(function removeData$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(key));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw new Error(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};","map":{"version":3,"sources":["C:/VSCode/React-Native/WhatsAppDoc(Authentication_branch)/WhatsAppDoc/src/screens/auth/utils/handleData.js"],"names":["AsyncStorage","storeData","key","value","jsonValue","JSON","stringify","setItem","Error","getData","getItem","parse","removeData","removeItem"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AAMA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,UAAAA,SAFe,GAEHC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAFG;AAAA;AAAA,2CAGfH,YAAY,CAACO,OAAb,CAAqBL,GAArB,EAA0BE,SAA1B,CAHe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAKf,IAAII,KAAJ,aALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAaP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOP,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEKF,YAAY,CAACU,OAAb,CAAqBR,GAArB,CAFL;;AAAA;AAEbE,UAAAA,SAFa;AAAA,4CAGZA,SAAS,IAAI,IAAb,GAAoBC,IAAI,CAACM,KAAL,CAAWP,SAAX,CAApB,GAA4C,IAHhC;;AAAA;AAAA;AAAA;AAAA,gBAKb,IAAII,KAAJ,cALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;AAYP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAOV,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEhBF,YAAY,CAACa,UAAb,CAAwBX,GAAxB,CAFgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gBAIhB,IAAIM,KAAJ,cAJgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["import AsyncStorage from \"@react-native-community/async-storage\";\r\n\r\n/**\r\n * @param {string} key \r\n * @param {string} value \r\n */\r\nexport const storeData = async (key, value) => {\r\n  try {\r\n    const jsonValue = JSON.stringify(value)\r\n    await AsyncStorage.setItem(key, jsonValue);\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} key \r\n * @returns {(string|object)}\r\n */\r\nexport const getData = async (key) => {\r\n  try {\r\n    const jsonValue = await AsyncStorage.getItem(key);\r\n    return jsonValue != null ? JSON.parse(jsonValue) : null;\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} key \r\n */\r\nexport const removeData = async (key) => {\r\n  try {\r\n    await AsyncStorage.removeItem(key)\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}