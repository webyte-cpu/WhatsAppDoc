{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport * as DocumentPicker from 'expo-document-picker';\n\nvar openImagePickerAsync = function openImagePickerAsync() {\n  var permissionResult, pickerResult;\n  return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n        case 3:\n          permissionResult = _context.sent;\n\n          if (permissionResult.granted) {\n            _context.next = 7;\n            break;\n          }\n\n          alert(\"Permission to access camera roll is required!\");\n          return _context.abrupt(\"return\");\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n        case 9:\n          pickerResult = _context.sent;\n\n          if (!pickerResult.cancelled) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 12:\n          return _context.abrupt(\"return\", pickerResult.uri);\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](0);\n          throw new Error(_context.t0);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 15]], Promise);\n};\n\nvar documentPicker = function documentPicker() {\n  var type,\n      imgFile,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function documentPicker$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          type = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : \"*/*\";\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(DocumentPicker.getDocumentAsync({\n            type: type\n          }));\n\n        case 4:\n          imgFile = _context2.sent;\n\n          if (!(imgFile.type === 'cancel')) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 7:\n          return _context2.abrupt(\"return\", imgFile);\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          throw new Error(e);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n};\n\nexport { openImagePickerAsync, documentPicker };","map":{"version":3,"sources":["C:/VSCode/React-Native/WhatsAppDoc(Authentication_branch)/WhatsAppDoc/src/components/filePicker.js"],"names":["ImagePicker","DocumentPicker","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","uri","Error","documentPicker","type","getDocumentAsync","imgFile","e"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,cAAZ,MAAgC,sBAAhC;;AAKA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEMF,WAAW,CAACG,mCAAZ,EAFN;;AAAA;AAEnBC,UAAAA,gBAFmB;;AAAA,cAIpBA,gBAAgB,CAACC,OAJG;AAAA;AAAA;AAAA;;AAKvBC,UAAAA,KAAK,CAAC,+CAAD,CAAL;AALuB;;AAAA;AAAA;AAAA,2CASEN,WAAW,CAACO,uBAAZ,EATF;;AAAA;AASnBC,UAAAA,YATmB;;AAAA,eAWrBA,YAAY,CAACC,SAXQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,2CAelBD,YAAY,CAACE,GAfK;;AAAA;AAAA;AAAA;AAAA,gBAiBnB,IAAIC,KAAJ,aAjBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AAyBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,IAAP,8DAAc,KAAd;AAAA;AAAA;AAAA,2CAEGZ,cAAc,CAACa,gBAAf,CAAgC;AAAED,YAAAA,IAAI,EAAEA;AAAR,WAAhC,CAFH;;AAAA;AAEbE,UAAAA,OAFa;;AAAA,gBAIhBA,OAAO,CAACF,IAAR,KAAiB,QAJD;AAAA;AAAA;AAAA;;AAAA,4CAKV,IALU;;AAAA;AAAA,4CAQZE,OARY;;AAAA;AAAA;AAAA;AAAA,gBAUb,IAAIJ,KAAJ,CAAUK,CAAV,CAVa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAcA,SAASd,oBAAT,EAA+BU,cAA/B","sourcesContent":["import * as ImagePicker from \"expo-image-picker\";\r\nimport * as DocumentPicker from 'expo-document-picker';\r\n\r\n/**\r\n * @returns {string} localUri\r\n */\r\nconst openImagePickerAsync = async () => {\r\n  try {\r\n    const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n\r\n    if (!permissionResult.granted) {\r\n      alert(\"Permission to access camera roll is required!\");\r\n      return;\r\n    }\r\n\r\n    const pickerResult = await ImagePicker.launchImageLibraryAsync();\r\n\r\n    if (pickerResult.cancelled) {\r\n      return;\r\n    }\r\n\r\n    return pickerResult.uri;\r\n  } catch (e) {\r\n    throw new Error(e)\r\n  }\r\n};\r\n\r\n/**\r\n * @param {string} type - see expo documentPicker for info\r\n * @returns {object} { type: 'success' | 'cancel', uri, name, size }\r\n */\r\nconst documentPicker = async (type = \"*/*\") => {\r\n  try {\r\n    const imgFile = await DocumentPicker.getDocumentAsync({ type: type })\r\n\r\n    if(imgFile.type === 'cancel') {\r\n      return null\r\n    }\r\n\r\n    return imgFile\r\n  } catch (error) {\r\n    throw new Error(e)\r\n  }\r\n}\r\n\r\nexport { openImagePickerAsync, documentPicker }"]},"metadata":{},"sourceType":"module"}